Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    SLCOMMENT
    MLCOMMENT
    WHITESPACE

Grammar

Rule 0     S' -> start
Rule 1     start -> program
Rule 2     program -> statement
Rule 3     statement -> ID EQUAL expression
Rule 4     expression -> expression ADD term
Rule 5     expression -> expression SUB term
Rule 6     expression -> term
Rule 7     term -> term MULT factor
Rule 8     term -> term DIV factor
Rule 9     term -> factor
Rule 10    factor -> OBRACKET expression CBRACKET
Rule 11    factor -> FLOAT_LITERAL
Rule 12    factor -> ID

Terminals, with rules where they appear

ADD                  : 4
CBRACKET             : 10
DIV                  : 8
EQUAL                : 3
FLOAT_LITERAL        : 11
ID                   : 3 12
MLCOMMENT            : 
MULT                 : 7
OBRACKET             : 10
SLCOMMENT            : 
SUB                  : 5
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 5 10
factor               : 7 8 9
program              : 1
start                : 0
statement            : 2
term                 : 4 5 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . program
    (2) program -> . statement
    (3) statement -> . ID EQUAL expression

    ID              shift and go to state 2

    start                          shift and go to state 1
    statement                      shift and go to state 3
    program                        shift and go to state 4

state 1

    (0) S' -> start .



state 2

    (3) statement -> ID . EQUAL expression

    EQUAL           shift and go to state 5


state 3

    (2) program -> statement .

    $end            reduce using rule 2 (program -> statement .)


state 4

    (1) start -> program .

    $end            reduce using rule 1 (start -> program .)


state 5

    (3) statement -> ID EQUAL . expression
    (4) expression -> . expression ADD term
    (5) expression -> . expression SUB term
    (6) expression -> . term
    (7) term -> . term MULT factor
    (8) term -> . term DIV factor
    (9) term -> . factor
    (10) factor -> . OBRACKET expression CBRACKET
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    OBRACKET        shift and go to state 8
    FLOAT_LITERAL   shift and go to state 9
    ID              shift and go to state 7

    expression                     shift and go to state 6
    factor                         shift and go to state 11
    term                           shift and go to state 10

state 6

    (3) statement -> ID EQUAL expression .
    (4) expression -> expression . ADD term
    (5) expression -> expression . SUB term

    $end            reduce using rule 3 (statement -> ID EQUAL expression .)
    ADD             shift and go to state 13
    SUB             shift and go to state 12


state 7

    (12) factor -> ID .

    MULT            reduce using rule 12 (factor -> ID .)
    DIV             reduce using rule 12 (factor -> ID .)
    CBRACKET        reduce using rule 12 (factor -> ID .)
    ADD             reduce using rule 12 (factor -> ID .)
    SUB             reduce using rule 12 (factor -> ID .)
    $end            reduce using rule 12 (factor -> ID .)


state 8

    (10) factor -> OBRACKET . expression CBRACKET
    (4) expression -> . expression ADD term
    (5) expression -> . expression SUB term
    (6) expression -> . term
    (7) term -> . term MULT factor
    (8) term -> . term DIV factor
    (9) term -> . factor
    (10) factor -> . OBRACKET expression CBRACKET
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    OBRACKET        shift and go to state 8
    FLOAT_LITERAL   shift and go to state 9
    ID              shift and go to state 7

    expression                     shift and go to state 14
    factor                         shift and go to state 11
    term                           shift and go to state 10

state 9

    (11) factor -> FLOAT_LITERAL .

    MULT            reduce using rule 11 (factor -> FLOAT_LITERAL .)
    DIV             reduce using rule 11 (factor -> FLOAT_LITERAL .)
    CBRACKET        reduce using rule 11 (factor -> FLOAT_LITERAL .)
    ADD             reduce using rule 11 (factor -> FLOAT_LITERAL .)
    SUB             reduce using rule 11 (factor -> FLOAT_LITERAL .)
    $end            reduce using rule 11 (factor -> FLOAT_LITERAL .)


state 10

    (6) expression -> term .
    (7) term -> term . MULT factor
    (8) term -> term . DIV factor

    CBRACKET        reduce using rule 6 (expression -> term .)
    ADD             reduce using rule 6 (expression -> term .)
    SUB             reduce using rule 6 (expression -> term .)
    $end            reduce using rule 6 (expression -> term .)
    MULT            shift and go to state 15
    DIV             shift and go to state 16


state 11

    (9) term -> factor .

    MULT            reduce using rule 9 (term -> factor .)
    DIV             reduce using rule 9 (term -> factor .)
    CBRACKET        reduce using rule 9 (term -> factor .)
    ADD             reduce using rule 9 (term -> factor .)
    SUB             reduce using rule 9 (term -> factor .)
    $end            reduce using rule 9 (term -> factor .)


state 12

    (5) expression -> expression SUB . term
    (7) term -> . term MULT factor
    (8) term -> . term DIV factor
    (9) term -> . factor
    (10) factor -> . OBRACKET expression CBRACKET
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    OBRACKET        shift and go to state 8
    FLOAT_LITERAL   shift and go to state 9
    ID              shift and go to state 7

    factor                         shift and go to state 11
    term                           shift and go to state 17

state 13

    (4) expression -> expression ADD . term
    (7) term -> . term MULT factor
    (8) term -> . term DIV factor
    (9) term -> . factor
    (10) factor -> . OBRACKET expression CBRACKET
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    OBRACKET        shift and go to state 8
    FLOAT_LITERAL   shift and go to state 9
    ID              shift and go to state 7

    factor                         shift and go to state 11
    term                           shift and go to state 18

state 14

    (10) factor -> OBRACKET expression . CBRACKET
    (4) expression -> expression . ADD term
    (5) expression -> expression . SUB term

    CBRACKET        shift and go to state 19
    ADD             shift and go to state 13
    SUB             shift and go to state 12


state 15

    (7) term -> term MULT . factor
    (10) factor -> . OBRACKET expression CBRACKET
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    OBRACKET        shift and go to state 8
    FLOAT_LITERAL   shift and go to state 9
    ID              shift and go to state 7

    factor                         shift and go to state 20

state 16

    (8) term -> term DIV . factor
    (10) factor -> . OBRACKET expression CBRACKET
    (11) factor -> . FLOAT_LITERAL
    (12) factor -> . ID

    OBRACKET        shift and go to state 8
    FLOAT_LITERAL   shift and go to state 9
    ID              shift and go to state 7

    factor                         shift and go to state 21

state 17

    (5) expression -> expression SUB term .
    (7) term -> term . MULT factor
    (8) term -> term . DIV factor

    CBRACKET        reduce using rule 5 (expression -> expression SUB term .)
    ADD             reduce using rule 5 (expression -> expression SUB term .)
    SUB             reduce using rule 5 (expression -> expression SUB term .)
    $end            reduce using rule 5 (expression -> expression SUB term .)
    MULT            shift and go to state 15
    DIV             shift and go to state 16


state 18

    (4) expression -> expression ADD term .
    (7) term -> term . MULT factor
    (8) term -> term . DIV factor

    CBRACKET        reduce using rule 4 (expression -> expression ADD term .)
    ADD             reduce using rule 4 (expression -> expression ADD term .)
    SUB             reduce using rule 4 (expression -> expression ADD term .)
    $end            reduce using rule 4 (expression -> expression ADD term .)
    MULT            shift and go to state 15
    DIV             shift and go to state 16


state 19

    (10) factor -> OBRACKET expression CBRACKET .

    MULT            reduce using rule 10 (factor -> OBRACKET expression CBRACKET .)
    DIV             reduce using rule 10 (factor -> OBRACKET expression CBRACKET .)
    CBRACKET        reduce using rule 10 (factor -> OBRACKET expression CBRACKET .)
    ADD             reduce using rule 10 (factor -> OBRACKET expression CBRACKET .)
    SUB             reduce using rule 10 (factor -> OBRACKET expression CBRACKET .)
    $end            reduce using rule 10 (factor -> OBRACKET expression CBRACKET .)


state 20

    (7) term -> term MULT factor .

    MULT            reduce using rule 7 (term -> term MULT factor .)
    DIV             reduce using rule 7 (term -> term MULT factor .)
    CBRACKET        reduce using rule 7 (term -> term MULT factor .)
    ADD             reduce using rule 7 (term -> term MULT factor .)
    SUB             reduce using rule 7 (term -> term MULT factor .)
    $end            reduce using rule 7 (term -> term MULT factor .)


state 21

    (8) term -> term DIV factor .

    MULT            reduce using rule 8 (term -> term DIV factor .)
    DIV             reduce using rule 8 (term -> term DIV factor .)
    CBRACKET        reduce using rule 8 (term -> term DIV factor .)
    ADD             reduce using rule 8 (term -> term DIV factor .)
    SUB             reduce using rule 8 (term -> term DIV factor .)
    $end            reduce using rule 8 (term -> term DIV factor .)

